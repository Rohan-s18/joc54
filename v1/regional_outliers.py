"""Created on Mon Jun 27 21:13:05 2022@author: rohansinghSource Code to find the outliers for based on the source-destination of a given service based on the service usage"""#Importsimport pandas as pdimport matplotlib.pyplot as pltimport numpy as npfrom sklearn.cluster import DBSCAN as dbsfrom sklearn.preprocessing import StandardScalerfrom sklearn import datasetsimport plotly.graph_objects as go#Reading the csv and storing the data in a dataframedf = pd.read_csv("/Users/rohansingh/Internship/Data Analysis/Datasets/masked_event_cdr.csv")"""The following code will convert the Source and Destination Countries from String to Number"""source_country_list = []dest_country_list = []source_country = df["SOURCE_COUNTRY"]dest_country = df["DEST_COUNTRY"]for i in range (0, len(source_country), 1):    if ((source_country[i] in source_country_list)==False):        source_country_list.append(source_country[i])    if((dest_country[i] in dest_country_list)==False):        dest_country_list.append(dest_country[i])        del source_country_list[4]del dest_country_list[2]del dest_country_list[2]#Method to convert source country code to a numberdef source_country_getter(s_country):    for i in range (0, len(source_country_list), 1):        if(s_country == source_country_list[i]):            return i    return 0   #Method to convert destination country code to a number     def dest_country_getter(d_country):    for i in range (0, len(dest_country_list), 1):        if(d_country == dest_country_list[i]):            return i    return 0src_temp_list = []dest_temp_list = []source_country = df["SOURCE_COUNTRY"]dest_country = df["DEST_COUNTRY"]for i in range (0, len(source_country),1):    src_temp_list.append(source_country_getter(source_country[i]))    dest_temp_list.append(dest_country_getter(dest_country[i]))df["DEST_COUNTRY"] = src_temp_listdf["SOURCE_COUNTRY"] = dest_temp_list"""End of Helper code"""#Extracting the important data and converting it into a numpy arrayimp_data = df[["SOURCE_COUNTRY","USAGE","DEST_COUNTRY"]]imp_data_array = imp_data.to_numpy()#Using DBSCAN from the Sklearn librarydb = dbs(eps=30, min_samples=10).fit(imp_data_array)core_samples_mask = np.zeros_like(db.labels_, dtype=bool)core_samples_mask[db.core_sample_indices_] = Truelabels = db.labels_n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)#Creating the color combinationsunique_labels = set(labels)colors = ['y', 'b', 'g', 'r']"""#Plotting the points in a scatterplot using pyplotfor k, col in zip(unique_labels, colors):    if k == -1:        # Black used for noise.        col = 'k'     class_member_mask = (labels == k)     xy = imp_data_array[class_member_mask & core_samples_mask]    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col,             markeredgecolor='k',             markersize=6)     xy = imp_data_array[class_member_mask & ~core_samples_mask]    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col,             markeredgecolor='k',             markersize=6) plt.title('number of clusters: %d' % n_clusters_)plt.show()"""#The following code can be used to write the infromation into a csv file (needs to be uncommented)temp = pd.DataFrame({"SOURCE_COUNTRY":imp_data["SOURCE_COUNTRY"],"DEST_COUNTRY":imp_data["DEST_COUNTRY"],"USAGE":imp_data["USAGE"],"LABEL":labels.tolist()})#temp.to_csv("/Users/rohansingh/Internship/Data Analysis/Analysis Notebooks/CSV/regional.csv")# X,Y,Z axes and the cluster information (labels) are all being converted in the form of list x_axis = temp["SOURCE_COUNTRY"].tolist()y_axis = temp["DEST_COUNTRY"].tolist()z_axis = temp["USAGE"].tolist()point_labels = labels.tolist()df_copy = pd.read_csv("/Users/rohansingh/Internship/Data Analysis/Datasets/masked_event_cdr.csv")temp = pd.DataFrame({"SOURCE_COUNTRY":imp_data["SOURCE_COUNTRY"],"USAGE":imp_data["USAGE"],"DEST_COUNTRY":imp_data["DEST_COUNTRY"],"LABEL":labels.tolist()})trace1 = go.Scatter3d(    x = df_copy['SOURCE_COUNTRY'],    y = df_copy['DEST_COUNTRY'],    z = temp['USAGE'],    mode='markers',    marker=dict(        size=12,        color=temp["LABEL"],                # set color to an array/list of desired values        colorscale='Viridis',   # choose a colorscale        opacity=0.8    ))data = [trace1]layout = go.Layout(    scene = dict(                    xaxis = dict(                        title='SOURCE Country'),                    yaxis = dict(                        title='Destination Country'),                    zaxis = dict(                        title='Usage'),),    margin=dict(        r=20, b=10, l=10, t=10    ))fig = go.Figure(data=data, layout=layout)fig.show()